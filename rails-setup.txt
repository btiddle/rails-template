===========================================================
Initial Setup 
===========================================================

# To generate app using template file 
#   -m, [--template=TEMPLATE]  # Path to application template
#   -T, [--skip-test-unit]     # Skip Test::Unit files
  cd ~/workspace
  rails new <app-name-here> -T -m <template-file-name-here>

# Generate a new sample app 
  cd ~/workspace
  rails new <app-name-here>
  cd <app-name-here>
# For Ruby on Rails Trutorial 3rd Edition while running Rails 4.0.8
  rails _4.0.8_  new <app-name-here>
# To create app but don't generate test directory
  rails _4.0.8_  new <app-name-here> --skip-test-unit
# To open entire project in Sublime
  subl .

# To install gem files
# Rename Gemfile to Gemfile.ORIGINAL
  mv Gemfile Gemfile.ORIGINAL
# Copy desired Gemfile from github
  copy https://github.com/btiddle/rails-template<desired-gemfile>  Gemfile
# Run bundle 
  bundle install --without production
# In case you've previously installed a version of a gem (such as 
# Rails itself) other than the one specified by the Gemfile, it's a 
# good idea to update the gems with bundle update to make sure the 
# versions match.
  bundle update
# You should also restart the web server to ensure that the new gems are
  loaded properly.
# List installed gem files
  gem query --local

# To install packages
  rails generate foundation:install
  rails generate rails_footnotes:install
  bundle exec guard init  # to get it initially
  rails generate rspec:install

# Update readme and rename from README.rdoc to README.md
  edit README.rdoc
  git mv README.rdoc README.md
  # SKIP: git commit -am "Improve the README"

# Edit config/environments/production.rb
  config.assets.compile = true

# To add additional files to ignore, added following to .gitingnore
  Added following to .gitingnore
  # Ignore other unneeded files.
  database.yml
  doc/
  *.swp
  *~
  .project
  .DS_Store
  .idea
  .secret
# TODO: Learn how to make production work when this is done. Skip for now.
  config/database.yml
  config/secrets.yml

===========================================================
Environments
===========================================================
# console, server, and migrate commands specify non-default environments in 
# three mutually incompatible ways
  rails console production
  rails server --environment production
  bundle exec rake db:migrate RAILS_ENV=production

===========================================================
Running app
===========================================================

# To run Rails server on local machine
  cd to dir with app
  rails server
# To stop server
  Ctrl-C

# To load application in browser
  http://localhost:3000

===========================================================
Git
===========================================================

# To initialize local machine repository and commit files
# Initialize local machine repository
  git init
  git add -A
  git commit -m "Initialize repository"
# To review the status of the repository
  git stats
# To restore local image to look like repository image
  git checkout -f
# To create a branch and switch to it
  git checkout -b <branch-name>
# To list branches and identify current active branch
  git branch
# To merge branch into master
  git checkout master
  git merge <branch-name>
# To delete a branch
  git branch -d <branch-name>
# To fix check-in message of last commit
  git commit --amend -m "Initialize repository"
  git push -f
# To add (already known files) and commit
  git commit -am "Update Gemfile.lock for Heroku"
# To rename a branch
  git branch -m <oldname> <newname>

===========================================================
Github
===========================================================
# To copy local repository to github
  Create repository at https://github.com/
  git remote add origin https://github.com/btiddle/<epositiry-name>.git
  git push -u origin <branch-name>   # Usually master Kingshill Cars - 01732 871234 - Taxi and Private Car Hire in the Kingshill and Malling area
  # rort suggests: git push -u origin --all

===========================================================
Heroku
===========================================================
# To deploy app to Heroku
# Initial creation
  heroku login
  heroku create <app-name>       # give a name; if blank one will be assigned
  git push heroku master         # note the URL produced 
                                 # (i.e. http://<name>.herokuapp.com)
# Whenever db is created or updated will need to rake
  heroku run rake db:migrate

# After running a migration you’ll want to restart your app to reload the
# schema and pickup any schema changes.
  heroku restart 

# To deploy subsequent incremental updates to Heroku
  git push heroku
# To access application
  URL           # in browser
  heroku open   # at command line 
# To check Heroku production log 
  heroku logs
# To trail Heroku production logs
  heroku logs -t
# To stop trailing Heroku production logs
  Ctrl-C

# To reset (drop) postgress db on Heroku
  git push heroku
  heroku pg:reset DATABASE
  heroku run rake db:migrate
  heroku run rake db:populate
  heroku open
# To get db information (limited to 1,000 rows in plan Hobby-dev)
  heroku pg:info
# To access console on Heroku
  heroku run console
# To rename application
  heroku rename <new-application-name>
# To display Heroku online dashboard
  www.heroku.com

===========================================================
Routes
===========================================================

# To list all the routes
  http://localhost:3000/rails/info/routes 
                     # per Rails 4.0 (routes and properties)
  http://localhost:3000/rails/routes
                     # per Ruby gem sextant (routes)
  rake routes
  helpers = Rails.application.routes.named_routes.helpers
  wget --spider -r -nv -nd -np http://localhost:3209/ 2>&1 | ack -o '(?<=URL:)\S+'

# Example Routing
  - See Rails Guides article on “Rails Routing from the Outside In”
  - http://guides.rubyonrails.org/routing.html

  # Std RESTful - /users/1
  SampleApp::Application.routes.draw do
    resources :users
  end

  # member - /users/1/following and /users/1/followers
  SampleApp::Application.routes.draw do
    resources :users do
      member do
        get :following, :followers
      end
    end
  end

  # collection - /users/tigers (to displau all tigers)
  resources :users do
    collection do
      get :tigers
    end
  end

===========================================================
Model
===========================================================

# To create and configure models
# Generate models (an example)
  rails generate model Blog name:string description:text
  rails generate model Post title:string content:text blog:references
  rails generate model Message author:string message:text post:references
# Add verifications and associations to models
  Edit model files in app/models/
# Create and migrate db
  rake db:migrate
  rort: bundle exec rake db:migrate
  # rort suggests: bundle exec rake db:migrate
# To see list of other rake commands
  bundle exec rake -T db  # just db
  bundle exec rake -T     # all
# To remove a model
  rails destroy model <model-name>
# To undo a single migration step
  bundle exec rake db:rollback
# To undo all migration steps
  bundle exec rake db:migrate VERSION=0

# To load console in sandbox, modifications art rolled back on exit
  rails console --sandbox

# To access db
  rails console
# To load test environment in console (default is dev env)
  rails console test
  Hirb.enable
  Blog.column_names   # list column names
  Blog.new            # create new object and display as table
  Blog.all            # display all records
  ActiveRecord::Base.connection.tables
                      # list all tables
  ActiveRecord::Base.connection.execute("select * from blogs")
                      # lists all field names and their values
  ActiveRecord::Base.connection.execute("SELECT * FROM sqlite_master")
                      # lists create statements for all tables
  ActiveRecord::Base.connection.execute ("SELECT sql FROM sqlite_master WHERE name = 'blogs'") 
                      # lists create statement for individual table
# Restart server or use reload! in console
# - When the database changes, i.e. rake db:migrate
# - When the model changes, i.e. edits to app/models
  reload!
# To get unstuck within console
  Ctrl-C
# To exit console
  exit or Ctrl-D

# To reset the database
  bundle exec rake db:reset
  bundle exec rake test:prepare
  restart server

# To reset the database and install prepopulated data
# Edit lib/tasks/sample_data.rake
 namespace :db do
  desc "Fill database with sample data"

  task populate: :environment do

    admin = User.create!(name: "Example User",
      email: "example@railstutorial.org",
      password: "foobar",
      password_confirmation: "foobar",
      admin: true)

    99.times do |n|
      name  = Faker::Name.name
      email = "example-#{n+1}@railstutorial.org"
      password  = "password"
      User.create!(name: name,
        email: email,
        password: password,
        password_confirmation: password)
    end

    users = User.all(limit: 6)
    50.times do
      content = Faker::Lorem.sentence(5)
      users.each { |user| user.microposts.create!(content: content) }
    end

  end
end
# Reinitialize db
  bundle exec rake db:reset
  bundle exec rake db:populate
  bundle exec rake test:prepare
  restart server (is required on some systems)

===========================================================
Controller
===========================================================

# To create controller with default RESTful Routing (an example)
# Controller and views are simultaneously created
  rails g controller User index new create show edit update destroy result
# To create controller and to suppress the generation of the 
# default RSpec tests (becasue will generate by hand)
  rails generate controller StaticPages home help --no-test-framework
# To remove a controller
  rails destroy controller User index new create show edit update destroy result

===========================================================
Scaffold
===========================================================

# To create scaffold
# Model, controller and views are simultaneously created
  rails generate scaffold Post name:string title:string context:text

# To configure root route and resources
  edit config/routes.rb (an example)
    resources :surveys
    get "/result" => 'surveys#result'
    root 'surveys#new'
  rake routes
  rort suggests: bundle exec rake db:migrate
  TODO: CHECK TO SEE IF THIS IS MIGRAGE OR ROUTES?

===========================================================
Test: Not RSpec
===========================================================

# To run the tests
  bundle exec rake test

# To use Guard to run tests
  bundle exec guard       # must be installed and configured first
# To run all the tests, hit return at the guard> prompt
# To exit Guard
  Ctrl-D

===========================================================
Test: RSpec
===========================================================
# Generate an integration test (request spec)
  rails generate integration_test static_pages

# Edit spec/requests/static_pages_spec.rb, replace with following
  require 'spec_helper'

  describe "Static pages" do

    describe "Home page" do

      it "should have the content 'Sample App'" do
        visit '/static_pages/home'
        expect(page).to have_content('Sample App')
      end
    end
  end

# Edit spec/spec_helper.rb, add following line
  config.include Capybara::DSL

# Generate an integration test for user
  rails generate integration_test user_pages

  require 'spec_helper'

  describe "User pages" do

    subject { page }

    describe "signup page" do
      before { visit signup_path }

      it { should have_content('Sign up') }
      it { should have_title(full_title('Sign up')) }
    end
  end

# Generate an integration test for microposts
  rails generate integration_test micropost_pages

# Whenever tests are updated, may need to rake test
  bundle exec rake test

# To run tests
  bundle exec rake db:migrate
  bundle exec rake test:prepare
  bundle exec rspec spec/requests/static_pages_spec.rb
  bundle exec rspec spec/requests/
  bundle exec rspec spec/
  bundle exec rake spec
  bundle exec rake 
# The -e here arranges to run just the examples whose description strings 
# match "signup page".
  bundle exec rspec spec/requests/user_pages_spec.rb -e "signup page"

  Up and Running with Custom RSpec Matchers
  http://www.reactive.io/tips/2008/12/10/up-and-running-with-custom-rspec-matchers/

  Project: RSpec Expectations 2.4
  https://www.relishapp.com/rspec/rspec-expectations/v/2-4/docs/built-in-matchers/predicate-matchers#should-have-key-(based-on-hash#has-key?)

  rspec_rails_cheetsheet.rb
  https://gist.github.com/them0nk/2166525
  https://gist.github.com/nerdinand/7787825

  Simple tricks to clean up your Capybara tests
  http://www.elabs.se/blog/51-simple-tricks-to-clean-up-your-capybara-tests

  Project: RSpec Core 3.1
  https://www.relishapp.com/rspec/rspec-core/docs/helper-methods/let-and-let

  Alex Chaffee
  http://alexchaffee.com/
  - Interesting testing presentations HERE!
    - For example - http://www.slideshare.net/alexchaffee/test-driven

===========================================================
RDoc
===========================================================
# Ruby has a built-in rdoc client that will generate html pages from 
# *.rdoc files:
  rdoc README.rdoc -o ./tmp/doc
  Try rdoc --help for more info.

# SimpleMarkup is dead. Long live MarkDown (and Textile).
  http://houseofpostmodern.wordpress.com/2010/02/02/simplemarkup-is-dead-long-live-markdown-and-textile/


===========================================================
Post-install message from capybara:
===========================================================
IMPORTANT! Some of the defaults have changed in Capybara 2.1. If you're experiencing failures,
please revert to the old behaviour by setting:

    Capybara.configure do |config|
      config.match = :one
      config.exact_options = true
      config.ignore_hidden_elements = true
      config.visible_text_only = true
    end

If you're migrating from Capybara 1.x, try:

    Capybara.configure do |config|
      config.match = :prefer_exact
      config.ignore_hidden_elements = false
    end

Details here: http://www.elabs.se/blog/60-introducing-capybara-2-1

===========================================================
markdown template
===========================================================

|     Project | Information                                                          |
|------------:|:---------------------------------------------------------------------|
| Domain:     | [Ruby on Rails Tutorial](https://www.railstutorial.org/) (rort)      |
| Topic:      | Ruby on Rails Tutorial 2nd Editon (2ed)                              |
| Assignment: | Sample Application (sample-app)                                      |
| Repository: | rort-2ed-sample-app                                                  |


